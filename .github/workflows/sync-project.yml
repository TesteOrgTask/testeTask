name: Sync Issue Form → Project fields
on:
  issues:
    types: [opened, edited]

permissions:
  contents: read
  issues: read
  pull-requests: read
  projects: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        env:
          ORG: your-org
          PROJECT_NUMBER: 1
        with:
          script: |
            const body = context.payload.issue.body || "";
            const parse = (label) => {
              const re = new RegExp(`(?<=### ${label}[\\r\\n]+)([\\s\\S]*?)(?=\\n### |$)`);
              const m = body.match(re);
              return m ? m[1].trim() : "";
            };
            const requester = parse("Quem está pedindo?");
            const priority  = parse("Prioridade");
            const due       = parse("Prazo desejado \\(YYYY-MM-DD\\)");

            // 1) Descobre IDs do Project e adiciona/pega item
            const { org, projectNumber } = { org: process.env.ORG, projectNumber: Number(process.env.PROJECT_NUMBER) };
            const issueNodeId = context.payload.issue.node_id;

            const qProject = await github.graphql(`
              query($org:String!, $number:Int!) {
                organization(login:$org){
                  projectV2(number:$number){
                    id
                    fields(first:50){ nodes { id, name, ... on ProjectV2SingleSelectField { options { id name } } } }
                  }
                }
              }`,
              { org, number: projectNumber }
            );
            const project = qProject.organization.projectV2;
            const projectId = project.id;

            // Add item (idempotente: se já existe, GitHub ignora duplicata)
            await github.graphql(`
              mutation($projectId:ID!, $contentId:ID!) {
                addProjectV2ItemById(input:{projectId:$projectId, contentId:$contentId}) { item { id } }
              }`, { projectId, contentId: issueNodeId });

            // Pega o item recém-adicionado
            const qItem = await github.graphql(`
              query($projectId:ID!, $contentId:ID!){
                node(id:$projectId){ ... on ProjectV2 {
                  items(first:20, query:"${context.payload.issue.number}") { nodes { id, content { ... on Issue { number id } } } }
                }}
              }`, { projectId });
            const itemId = qItem.node.items.nodes.find(n => n.content?.number === context.payload.issue.number)?.id;

            // Helper para achar campo
            const fieldByName = (name) => project.fields.nodes.find(f => f.name === name);

            // 2) Atualiza campos
            const requesterField = fieldByName("Requester");
            if (requesterField && requester) {
              await github.graphql(`
                mutation($projectId:ID!, $itemId:ID!, $fieldId:ID!, $val:String!) {
                  updateProjectV2ItemFieldValue(input:{
                    projectId:$projectId, itemId:$itemId, fieldId:$fieldId,
                    value:{ text:$val }
                  }) { projectV2Item { id } }
                }`, { projectId, itemId, fieldId: requesterField.id, val: requester });
            }

            const priorityField = fieldByName("Prioridade");
            if (priorityField && priority) {
              const opt = priorityField.options.find(o => o.name === priority);
              if (opt) {
                await github.graphql(`
                  mutation($projectId:ID!, $itemId:ID!, $fieldId:ID!, $opt:ID!) {
                    updateProjectV2ItemFieldValue(input:{
                      projectId:$projectId, itemId:$itemId, fieldId:$fieldId,
                      value:{ singleSelectOptionId:$opt }
                    }) { projectV2Item { id } }
                  }`, { projectId, itemId, fieldId: priorityField.id, opt: opt.id });
              }
            }

            const dueField = fieldByName("Due date");
            if (dueField && due) {
              await github.graphql(`
                mutation($projectId:ID!, $itemId:ID!, $fieldId:ID!, $date:Date!) {
                  updateProjectV2ItemFieldValue(input:{
                    projectId:$projectId, itemId:$itemId, fieldId:$fieldId,
                    value:{ date:$date }
                  }) { projectV2Item { id } }
                }`, { projectId, itemId, fieldId: dueField.id, date: due });
            }
