name: Sync Issue Form → Project fields

on:
  issues:
    types: [opened, edited, labeled]

permissions:
  contents: read
  issues: read
  pull-requests: read
  repository-projects: write   # único permission válido para projects no GITHUB_TOKEN

jobs:
  sync:
    # opcional: só roda para issues do template Task
    if: contains(github.event.issue.labels.*.name, 'task') || startsWith(github.event.issue.title, '[Task]')
    runs-on: ubuntu-latest
    steps:
      - name: Sync fields
        uses: actions/github-script@v7
        env:
          # === Edite estes valores ===
          SCOPE: org            # "org" para Project da org, "user" para Project pessoal
          OWNER: TesteOrgTask        # se SCOPE=org → login da org; se SCOPE=user → seu usuário
          PROJECT_NUMBER: "3"   # número do Project (v2)
        with:
          # Para Project da organização, recomendo um PAT com Projects: Read/Write
          github-token: ${{ secrets.ORG_PAT }}   # troque para ${{ github.token }} se for user project
          script: |
            const scope = process.env.SCOPE;          // "org" | "user"
            const owner = process.env.OWNER;
            const projectNumber = Number(process.env.PROJECT_NUMBER);
            const issue = context.payload.issue;
            const body = issue.body || "";

            // Lê seções do Issue Form
            const take = (label) => {
              const re = new RegExp(`(?<=### ${label}[\\r\\n]+)([\\s\\S]*?)(?=\\n### |$)`);
              const m = body.match(re);
              return m ? m[1].trim() : "";
            };

            const requester = take("Quem está pedindo\\?");
            const priority  = take("Prioridade");
            const due       = take("Prazo desejado \\(YYYY-MM-DD\\)");

            // Busca Project + fields
            const q = `
              query($owner:String!, $number:Int!) {
                ${scope === "org" ? "organization(login:$owner)" : "user(login:$owner)"} {
                  projectV2(number:$number) {
                    id
                    items(first: 50, query: "${issue.number}") {
                      nodes { id content { ... on Issue { id number } } }
                    }
                    fields(first: 50) {
                      nodes {
                        id
                        name
                        ... on ProjectV2SingleSelectField { options { id name } }
                      }
                    }
                  }
                }
              }
            `;
            const root = (await github.graphql(q, { owner, number: projectNumber }))
              [scope === "org" ? "organization" : "user"].projectV2;

            const projectId = root.id;

            // Garante item no Project
            await github.graphql(`
              mutation($projectId:ID!, $contentId:ID!) {
                addProjectV2ItemById(input:{ projectId:$projectId, contentId:$contentId }) { item { id } }
              }`, { projectId, contentId: issue.node_id });

            // Encontra o item referente à issue
            const items = root.items.nodes;
            const itemId = (items.find(n => n.content?.number === issue.number) || items[0])?.id;
            if (!itemId) return;

            // Atualiza campos
            const fields = root.fields.nodes;
            const byName = (n) => fields.find(f => f.name === n);

            // Requester (Text)
            const fRequester = byName("Requester");
            if (fRequester && requester) {
              await github.graphql(`
                mutation($projectId:ID!, $itemId:ID!, $fieldId:ID!, $val:String!) {
                  updateProjectV2ItemFieldValue(input:{
                    projectId:$projectId, itemId:$itemId, fieldId:$fieldId,
                    value:{ text:$val }
                  }) { projectV2Item { id } }
                }`, { projectId, itemId, fieldId: fRequester.id, val: requester });
            }

            // Prioridade (Single select)
            const fPriority = byName("Prioridade");
            if (fPriority && priority) {
              const opt = fPriority.options?.find(o => o.name === priority);
              if (opt) {
                await github.graphql(`
                  mutation($projectId:ID!, $itemId:ID!, $fieldId:ID!, $opt:ID!) {
                    updateProjectV2ItemFieldValue(input:{
                      projectId:$projectId, itemId:$itemId, fieldId:$fieldId,
                      value:{ singleSelectOptionId:$opt }
                    }) { projectV2Item { id } }
                  }`, { projectId, itemId, fieldId: fPriority.id, opt: opt.id });
              }
            }

            // Due date (Date)
            const fDue = byName("Due date");
            if (fDue && /^\\d{4}-\\d{2}-\\d{2}$/.test(due)) {
              await github.graphql(`
                mutation($projectId:ID!, $itemId:ID!, $fieldId:ID!, $date:Date!) {
                  updateProjectV2ItemFieldValue(input:{
                    projectId:$projectId, itemId:$itemId, fieldId:$fieldId,
                    value:{ date:$date }
                  }) { projectV2Item { id } }
                }`, { projectId, itemId, fieldId: fDue.id, date: due });
            
            }


