name: Set current iteration (Projects v2)

on:
  issues:
    types: [opened]
  workflow_dispatch:
    inputs:
      issue_number:
        description: "Issue number para testar manualmente"
        required: false
        type: string

jobs:
  set-iteration:
    runs-on: ubuntu-latest
    permissions:
      issues: read
      contents: read
    env:
      # ðŸ‘‰ Secrets/constantes
      GH_TOKEN: ${{ secrets.ORG_PAT }}         # PAT classic com: project, read:org (+ repo se privado)
      OWNER: TesteOrgTask
      PROJECT_ID: PVT_kwDODkGqB84BGE05                # seu Project v2
      FIELD_ID: PVTIF_lADODkGqB84BGE05zg3XHl0         # campo "Iteration"

    steps:
      - name: Sanity / whoami
        run: |
          gh --version
          gh api user

      - name: Resolver ISSUE_NODE_ID (evento ou manual)
        id: issue
        shell: bash
        run: |
          if [ -n "${{ inputs.issue_number }}" ]; then
            NUM="${{ inputs.issue_number }}"
          else
            NUM="${{ github.event.issue.number }}"
          fi
          if [ -z "$NUM" ]; then
            echo "Nenhum issue_number disponÃ­vel. Abra via 'issues: opened' ou use workflow_dispatch com issue_number." >&2
            exit 1
          fi
          echo "ISSUE_NUMBER=$NUM" >> $GITHUB_ENV
          NODE_ID=$(gh api repos/${{ github.repository }}/issues/$NUM -q .node_id)
          echo "ISSUE_NODE_ID=$NODE_ID" >> $GITHUB_ENV
          echo "node_id=$NODE_ID"

      - name: Adicionar item ao Project (idempotente)
        id: additem
        shell: bash
        run: |
          read -r -d '' MUT <<'GRAPHQL'
          mutation($project:ID!, $content:ID!){
            addProjectV2ItemById(input:{projectId:$project, contentId:$content}) {
              item { id }
            }
          }
          GRAPHQL
          gh api graphql -f query="$MUT" -f project="$PROJECT_ID" -f content="$ISSUE_NODE_ID" > add.json || true

          # Buscar o ITEM_ID correspondente Ã  issue dentro do Project
          read -r -d '' Q <<'GRAPHQL'
          query($project:ID!, $issue:String!) {
            node(id:$project) {
              ... on ProjectV2 {
                items(first:100, query:$issue) { nodes { id } }
              }
            }
          }
          GRAPHQL
          ITEM_ID=$(gh api graphql -f query="$Q" -f project="$PROJECT_ID" -f issue="$ISSUE_NODE_ID" -q .data.node.items.nodes[0].id)
          if [ -z "$ITEM_ID" ]; then
            echo "Item nÃ£o encontrado no Project (verifique permissÃµes do token e acesso ao Project)." >&2
            echo "Resposta add.json:"; cat add.json || true
            exit 1
          fi
          echo "ITEM_ID=$ITEM_ID" >> $GITHUB_ENV
          echo "item_id=$ITEM_ID"

      - name: Obter config do campo Iteration
        id: getfield
        shell: bash
        run: |
          read -r -d '' Q <<'GRAPHQL'
          query($project:ID!){
            node(id:$project){
              ... on ProjectV2 {
                fields(first:50){
                  nodes{
                    __typename
                    ... on ProjectV2IterationField {
                      id name
                      configuration { iterations { id title startDate duration } }
                    }
                  }
                }
              }
            }
          }
          GRAPHQL
          gh api graphql -f query="$Q" -f project="$PROJECT_ID" > project_fields.json
          echo "Baixado project_fields.json"
          # salvar tambÃ©m a data de hoje em SP
          echo "TODAY=$(TZ=America/Sao_Paulo date +%F)" >> $GITHUB_ENV
          echo "today=$(TZ=America/Sao_Paulo date +%F)"

      - name: Calcular iterationId atual (SÃ£o Paulo)
        id: pickiter
        shell: bash
        run: |
          python3 - <<'PY' | tee iter.env
          import json, os, sys, datetime
          from datetime import date, timedelta

          today = os.environ.get("TODAY")
          if not today:
              print("Sem TODAY no env", file=sys.stderr); sys.exit(1)
          today = date.fromisoformat(today)

          data = json.load(open("project_fields.json","r", encoding="utf-8"))
          fields = data["data"]["node"]["fields"]["nodes"]

          # Achar o campo Iteration correto pelo FIELD_ID fixo
          FIELD_ID = os.environ["FIELD_ID"]
          iter_field = None
          for f in fields:
              if f.get("__typename") == "ProjectV2IterationField" and f.get("id") == FIELD_ID:
                  iter_field = f
                  break

          if not iter_field:
              print("Campo Iteration nÃ£o encontrado pelo FIELD_ID fornecido.", file=sys.stderr)
              sys.exit(1)

          iterations = iter_field["configuration"]["iterations"] or []
          current = None
          for it in iterations:
              sd = it.get("startDate")
              dur = it.get("duration")
              if not sd or not dur:
                  continue
              start = date.fromisoformat(sd)
              end = start + timedelta(days=int(dur))
              if start <= today < end:
                  current = it["id"]
                  break

          if not current:
              print("Nenhuma iteraÃ§Ã£o atual encontrada (confira startDate/duration no campo Iteration).", file=sys.stderr)
              sys.exit(1)

          print(f"ITERATION_ID={current}")
          PY
          # exportar var para prÃ³ximos passos
          source iter.env
          echo "$ITERATION_ID" >/dev/null
          echo "ITERATION_ID=$ITERATION_ID" >> $GITHUB_ENV

      - name: Aplicar Iteration = current
        shell: bash
        run: |
          read -r -d '' MUT <<'GRAPHQL'
          mutation($project:ID!, $item:ID!, $field:ID!, $iter:String!){
            updateProjectV2ItemFieldValue(
              input:{projectId:$project, itemId:$item, fieldId:$field, value:{iterationId:$iter}}
            ){ clientMutationId }
          }
          GRAPHQL
          gh api graphql -f query="$MUT" \
            -f project="$PROJECT_ID" \
            -f item="$ITEM_ID" \
            -f field="$FIELD_ID" \
            -f iter="$ITERATION_ID"
          echo "âœ… Iteration aplicada."